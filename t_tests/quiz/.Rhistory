lm
install.packages("psych")
install.packages("ggplot2")
data <- c(1,2,3,4)
data
mat
matrix
?matrix
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
Subset the data frame to only the individuals that are greater than 188 centimeters tall. Assign this subset to a data frame
called dataFrameSubset. Then run this command: mean(dataFrameSubset$weightsK) to get the average weight among this subset of
men in the data. What is the
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
dataFrameSubset <- subset(dataFrame, dataFrame$heightsCM > 188)
dataFrameSubset
mean(dataFrameSubset$weightsK)
pnorm
rnorm
dnorm
x <- rnorm(10)
x
print x
print(x)
summary(x)
x <- rnorm(10)
summary(x)
set.seed(1)
?rnorm
rnorm
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(1)
rnorm(1)
n1 <- set.seed()
set.seed(1)
n1 <- c(rnorm(5))
n1
set.seed(1)
n2 <- c(rnorm(5))
n1 == n2
?rnorm
e <- rnorm(100, 0, 1)
y <- 1.5 - 3 * x + e
y
y
y
x <- rnorm(100)
x
y
xy
library(ggplot2)
qplot(x=x, y=y)
e <- rnorm(500, 0, 1)
qplot(x=x, y=y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
e <- rnorm(100, 0, 1)
y <- 1.5 - 3 * x + e
plot(x,y)
qplot(x,y)
summary(y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 + x + e
summary(y)
plot(x,y)
str(y)
set.seed(1)
x <- rnrom(100)
x <- rnorm(100)
y <- rpois(100, exp(log.mu))
set.seed(41)
cauchyValues <- rcauchy(100)
?sample
set.seed(415)
sample(cauchyValues, 10, replace = True)
sample(cauchyValues, 10, replace)
sample(cauchyValues, 10, replace=Y)
?sample
sample(cauchyValues, 10, replace=TRUE)
source('~/.active-rstudio-document')
1:6
1:10
cameraData <- data.frame(Location.1=1:10)
cameraData
cameraData <- data.frame(Location.1=1:10, intersection=5:18)
cameraData <- data.frame(Location.1=1:10, intersection=5:15)
cameraData <- data.frame(Location.1=1:10, intersection=5:14)
installed.packages("Hmisc")
library(HMisc)
installed.packages("HMisc")
data <- read.table("~/Downloads/data.tsv")
data <- read.table("~/Downloads/data.tsv", header=T, sep="|")
data
data <- read.table("~/Downloads/data.tsv", header=T)
data <- read.table("~/Downloads/data.tsv", header=T)
data
data <- read.table("~/Downloads/data.tsv", header=T)
data
plot(data$numberOfRatings, data$mean)
model = lm(data$numberOfRatings ~ data$mean)
summary(model)
model = lm(data$numberOfRatings ~ data$mean + data$year)
summary(model)
plot(data$numberOfRatings, data$mean, pch=19, col="blue")
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.0)
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2)
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2);
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2); lines(data$mean, model$fitted, col="red", lwd=3)
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2)
lines(data$mean, model$fitted, col="red", lwd=3)
model = lm(data$numberOfRatings ~ data$mean)
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2)
lines(data$mean, model$fitted, col="red", lwd=3)
lines(data$numberOfRatings, model$fitted, col="red", lwd=3)
model = lm(data$mean ~ data$numberOfRatings)
summary(model)
plot(data$numberOfRatings, data$mean, pch=19, col="blue", cex=1.2)
lines(data$numberOfRatings, model$fitted, col="red", lwd=3)
model$residuals
plot(log10(data$numberOfRatings), data$mean, pch=19, col="blue", cex=1.2)
model = lm(data$mean ~ log10(data$numberOfRatings))
lines(log10(data$numberOfRatings), model$fitted, col="red", lwd=3)
plot(log10(data$numberOfRatings), data$mean, pch=19, col="blue", cex=1.5)
lines(log10(data$numberOfRatings), model$fitted, col="red", lwd=4)
plot(log10(data$numberOfRatings), data$mean, pch=19, col="blue", cex=1.3)
lines(log10(data$numberOfRatings), model$fitted, col="red", lwd=4)
plot(log10(data$numberOfRatings), model$residuals, pch=19, col="blue", cex=1.3)
lines(log10(data$numberOfRatings), model$fitted, col="red", lwd=4)
data
plot(data$numberOfRatings, data$value)
model2 <- lm(data$value ~ data$numberOfRatings)
summary(model2)
model3 <- lm(data$mean ~ data$year)
summary(model3)
plot(data$year, data$mean)
emails <- 3921
spam <- 367
smallNoBig <- 2827
both <- 168
cbind
?cbind
both
class(both)
class(emails)
class("this")
both.length
attr
attr(both)
print(both)
vector("character", length=10)
vector("float", length=10)
rnorm
?rnorm
cnorm
m <- matrix(2, 3)
m
m <- matrix(nrow=2, ncol=3)
m
attr(m)
attributes(m)
m <- matrix(1:6, nrow=2, ncol=3)
m
m <- matrix(6:12, nrow=2, ncol=3)
vals <- 1:20
dim(vals) <- c(5, 4)
vals
x <- list(1,"a", TRUE,1)
x
x[[2]][1]
x <- list(1,c("a","b"), TRUE,1)
x
x <- list(1,vector("a","b"), TRUE,1)
as.factor(c("Male","Female"))
genders <- as.factor(c("Male","Female"))
genders
genders <- as.factor(c("male","female","male","female","male","male"))
genders
table(genders)
unclass(genders)
attributes(table(genders))
t <- table(genders)
dimnames(t)
m
as.data.frame(m)
as.data.frame(m)[[1]]
as.data.frame(m)[[1]][1]
as.data.frame(m)
df <- as.data.frame(m)
colnames(df)
colnames(df) <- c("one","two","three")
df
library(reshaper)
library(reshape)
melt
df
melt(df)
y <- 1:3
names(y) <- c("Calv","Shan","Chris")
y
counts <- c(both,emails,smallNoBig,spam)
counts
names(counts) <- c("Both", "Emails", "SmallNoBig", "Spam")
counts
perm
library(gtools)
install.packages('gtools')
library(gtools)
?permutations
die1 <- 1:6
die2 <- 1:6
permutations()
permutations(6,2,die1)
permutations(6,2,die1,repeats.allowed=F)
?combinations
combinations(6,2,die1,repeats.allowed=F)
die <- 1:6
rolls <- combinations(6,2,die)
rolls
class(rolls)
rolls.dt <- as.data.frame(rolls)
rolls.dt
names(rolls) <- c("Die1","Die2")
names(rolls.dt) <- c("Die1","Die2")
rolls.dt
sums <- (rolls.dt$Die1 + rolls.dt$Die2)
?cbind
cbind(rolls.dt, sums)
library(gtools)
# Create the die
die <- 1:6
# Simulate rolls
rolls <- combinations(6,2,die)
rolls
library(gtools)
# Create the die
die <- 1:6
# Simulate rolls
rolls <- as.data.frame(combinations(6,2,die))
rolls
rols
rolls
names(rolls) <- c("Die1", "Die2")
rolls
rolls$Sum <- rolls$Die1 + rolls$Die2
rolls
A <- rolls[rolls$Sum < 12,]
A
?union
rolls
rownames(rolls)
library(gtools)
# Create the die
die <- 1:6
# Simulate rolls
rolls <- as.data.frame(permutations(6, 2, die))
names(rolls) <- c("Die1", "Die2")
# Compute sums
rolls$Sum <- rolls$Die1 + rolls$Die2
# All events < 12
A  <- rolls[rolls$Sum < 12,]
rolls
setwd("~/code/r/stats-one/t_tests/quiz/")
download.file("https://d396qusza40orc.cloudfront.net/stats1%2Fdatafiles%2FStats1.13.HW.02.txt", destfile="data.tsv",method="curl")
data <- read.table("data.tsv", header=T)
head(data)
levels(data$condition)
data
data.pre <- data[data$condition == "pre",]
data.pre
data$condition
head(data)
data.pre <- data[data$time == "pre",]
head(data.pre)
data.pre  <- data[data$time == "pre",]
data.post <- data[data$time == "post",]
data.pre
library(psych)
describeBy(data, data$time)
t.test(data.post, data.pre, paired=T)
t.test(data.post$SR, data.pre$SR, paired=T)
describeBy(data, data$time)
t.test(data.post, data.pre, paired=T)
t.test(data.post$SR, data.pre$SR, paired=T)
nrow(data)
levels(data$condition)
data.ds <- subset(data, data$condition == "DS")
data.pe <- subset(data, data$condition == "PE")
data.wm <- subset(data, data$condition == "WM")
describeBy(data.pre$condition)
describeBy(data, data.pre$condition)
describeBy(data$condition, data)
describeBy(data.pre)
describeBy(data.pre, data$condition)
describeBy(data.pre, "condition")
describeBy(data.pre, data.pre$condition)
describeBy(data.pre, data.pre$condition)$mean
describeBy(data.pre, data.pre$condition)
describeBy(data.pre, data.pre$condition)
describeBy(data.post, data.post$condition)
ll <- describeBy(data.pre, data.pre$condition)
ll
ll[[0]]
attributes(ll)
pre <- describeBy(data.pre, data.pre$condition)
post <- describeBy(data.post, data.post$condition)
pre$DS$mean
post$DS$mean
pre$DS$mean[[3]]
pre$DS$mean[[4]]
pre$PE$mean[[4]]
pre$WM$mean[[4]]
post$DS$mean[[4]]
post$PE$mean[[4]]
post$WM$mean[[4]]
pre$DS$mean[[4]]
post$DS$mean[[4]]
pre$PE$mean[[4]]
post$PE$mean[[4]]
pre$WM$mean[[4]]
post$WM$mean[[4]]
pre$DS$mean[[4]]
post$DS$mean[[4]]
pre$PE$mean[[4]]
post$PE$mean[[4]]
pre$WM$mean[[4]]
post$WM$mean[[4]]
print(paste("DS: ",pre$DS$mean[[4]] - post$DS$mean[[4]])
print(paste("DS: ",pre$DS$mean[[4]] - post$DS$mean[[4]]))
print(paste("DS: ",pre$DS$mean[[4]] - post$DS$mean[[4]]))
print(paste("DS: ",pre$DS$mean[[4]] - post$DS$mean[[4]]))
print(paste("PE: ",pre$PE$mean[[4]] - post$PE$mean[[4]]))
print(paste("WM: ",pre$WM$mean[[4]] - post$WM$mean[[4]]))
